'.source.ocaml':
  'pragma':
    'prefix': 'pragma'
    'body': """
    (** $1 *)
    """
'.source.python':
  'pragma':
    'prefix': 'pragma'
    'body': """
    # -----------------------------------------------------------------------------
    # $1
    """
'.source.cpp':
  'pragma':
    'prefix': 'pragma'
    'body': """
    // ----------------------------------------------------------------------------
    // $1
    """
'.source.thrift':
  'pragma':
    'prefix': 'pragma'
    'body': """
    // ----------------------------------------------------------------------------
    // $1
    """
'.source.hack':
  'A':
    'prefix': 'A'
    'body': 'Awaitable'
  'po':
    'prefix': 'po'
    'body': """
      final class $1 {
        public function __construct(
          $2
        ) {}
      }
    """
  'pragma':
    'prefix': 'pragma'
    'body': """
    // ----------------------------------------------------------------------------
    // $1
    """
  'sha':
    'prefix': 'sha'
    'body': """
      const type $1 = shape(
        $2
      )
    """
  '**':
    'prefix': '**'
    'body': '/*$1=*/$2,'
  'psf':
    'prefix': 'psf'
    'body': """
      public static function $1(
        $2
      ): $3 {
        $4
      }
    """
  'psaf':
    'prefix': 'psaf'
    'body': """
      public static async function gen$1(
        $2
      ): Awaitable<$3> {
        $4
      }
    """
'.source.js':
  'react create class':
    'prefix': 'rcc'
    'body': """
      const ${1:MyComponent} = React.createClass({
        displayName: '$1',
        propTypes: {
          foo: React.PropTypes.string.isRequired,
        },
        render() {
          return (
            <div>$2</div>
          );
        },
      });
    """
  'reactc':
    'prefix': 'reactc'
    'body': """
      class ${1:MyComponent} extends React.Component {
        static propTypes = {
          ${2:foo}: React.PropTypes.string.isRequired,
        };
        static defaultProps = {
        };

        constructor(props) {
          super(props);
          this.state = {};
        }

        render() {
          return (
            <div>
              ${3:Hello}
            </div>
          );
        }
      };
    """
  'relayc':
    'prefix': 'relayc'
    'body': """
      Relay.createContainer(${1:MyComponent}, {
        initialVariables: {
          size: 32,
        },
        fragments: {
          user: () => Relay.QL`
            fragment on User {
              profilePhoto(size: $size) {
                uri,
              },
            }
          `,
        },
      });
    """
  'es6 method':
    'prefix': 'm'
    'body': """
      ${1:myMethod}($2) {
        $3
      },
    """
  'require immutable':
    'prefix': 'imm'
    'body': "const Immutable = require('immutable');"
  'import immutable':
    'prefix': 'im'
    'body': "import Immutable, {Map, List, Record, Set} from 'immutable';"
  'pragma':
    'prefix': 'pragma'
    'body': """
    // -----------------------------------------------------------------------------
    // $1
    """
'.source.coffee':
  'pragma':
    'prefix': 'pragma'
    'body': """
    # ------------------------------------------------------------------------------
    # $1
    """
'.source.ruby':
  'pragma':
    'prefix': 'pragma'
    'body': """
    # ------------------------------------------------------------------------------
    # $1
    """
'.source.css.scss':
  'pragma':
    'prefix': 'pragma'
    'body': """
    // -----------------------------------------------------------------------------
    // $1
    """
'.source.shell':
  'pragma':
    'prefix': 'pragma'
    'body': """
    # ------------------------------------------------------------------------------
    # $1
    """
  'base':
    'prefix': 'base'
    'body': """
    #!/usr/bin/env bash

    set -ex

    usage() {
      set +ex
      read -r -d '' msg <<EOF
    usage: $(basename "\\$0")
    EOF
      echo "$msg"
      set -ex
    }

    if false; then
      usage
      exit 1
    fi

    ${1}
    """
'*':
  'solve':
    'prefix': 'solve'
    'body': """
      ## Context

      - ${1}

      ## Problem

      -

      ## Requirements

      -

      ## Proposal

      -

      ## Open Questions

      -

      ## Related problems in the wild

      -

      ## Test plan

      -

      ## Timeline

      -
    """
