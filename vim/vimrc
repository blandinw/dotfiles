set nocompatible
filetype off

" vundle
" run :PluginInstall to install all packages
set rtp+=~/.vim/bundle/Vundle.vim
if isdirectory(expand('~/.vim/bundle/Vundle.vim'))
  call vundle#begin()

  " let Vundle manage Vundle, required
  Plugin 'VundleVim/Vundle.vim'

  Plugin 'scrooloose/nerdtree.git'
  Plugin 'scrooloose/syntastic.git'
  Plugin 'tomtom/tcomment_vim.git'
  Plugin 'tpope/vim-surround.git'
  Plugin 'kien/ctrlp.vim.git'

  call vundle#end()
endif

filetype plugin indent on
set noesckeys

" appearance
syntax on
set number
set title
set linespace=1
set bg=light

" neat mappings
inoremap jk <esc>
nnoremap - <C-w>w
nnoremap _ <C-w>W
nnoremap <silent><leader>` :e#<cr>
nnoremap <silent><C-h> :let @/ = '  *$'<cr>
nnoremap <leader>ve :vs $MYVIMRC<cr>
nnoremap <leader>vs :so $MYVIMRC<cr>
nnoremap <silent><leader>s :w<cr>:so %<cr>
nnoremap <silent><leader>c :cn<cr>
nnoremap <silent><leader>l :lclose \| :cclose<cr>
command! W :w

" quickly :source a range of VimL
vnoremap <leader>s :w! /tmp/sourced.vim \| :so /tmp/sourced.vim \| :!rm /tmp/sourced.vim &>/dev/null<cr><cr>

" indent
set autoindent smartindent
set sw=4  " number of spaces inserted when using >> or <<
set sts=4 " number of spaces inserted when pressing Tab
set ts=8  " _displayed_ width of a Tab character
set expandtab " insert spaces instead of tabs

" search
set ignorecase " Ignore case when searching
set smartcase
set hlsearch " Highlight search things
set incsearch " Make search act like search in modern browsers
set magic " Set magic on, for regular expressions

" wrap
set wrap

" sets how many lines of history VIM has to remember
set history=300

" autocompletion in menu
set wildmenu
set wildignore+=*.o,*.obj,.git,*.pyc
set wildignore+=app/cache/*,app/logs/*
set wildignore+=tmp/cache
set wildignore+=.DS_Store,*.swp,*.swo
set wildignore+=*.class,*.scssc
set wildignore+=temp,node_modules

" backups
set backup backupext=~ backupdir=~/backups/vim_backups/

" statusline
set laststatus=2
set statusline=\ %F%m%r%h\ %w\ \ Line:\ %l/%L:%c

set hidden " no need to write to disk when closing file

" cpp
au FileType cpp set sw=2 sts=2

" lua
au FileType lua set sw=3 sts=3

" ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,*.podspec,Podfile} set ft=ruby
au FileType ruby set sw=2 sts=2
au FileType eruby set sw=2 sts=2

" php
au FileType php set sw=2 sts=2

" go
au FileType go set noexpandtab sw=4 ts=4 sts=0

" java
au FileType java set sw=4 sts=4

" makefile
au FileType make set ts=2

" ctrlp
let g:ctrlp_max_height = 25
let g:ctrlp_map = '<leader>p'
let g:ctrlp_root_markers = ['.ctrlp', '.projectile']
let g:ctrlp_switch_buffer = 0
nnoremap <leader>b :CtrlPBuffer<cr>

" NERDTree
nnoremap <silent><leader>n :NERDTreeToggle<cr>
nnoremap <silent><leader>f :NERDTreeFind<cr>
let NERDTreeIgnore=['^cache$', '^logs$', '\~$']

" load other configz
source $HOME/.vim/local.vim
